[ -z "$PS1" ] && return

##
## functions
##
_prompt_path() {
    local WD=${PWD/$HOME/~}
    if (( ${#WD} > 20 )); then
        print ${WD%%/*}/.../${WD##*/}
    else 
        print $WD
    fi 
}

_git_eread() { 
    f="$1";
    shift;
    test -r "$f" && read "$@" < "$f"
}

_git_ps1() {
    gitdir=$(git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD 2>/dev/null)
    if [ $? = 0 ]; then
        g=$(print "$gitdir"|head -n1)

        local branch=""
        local status=""
        local step=""
        local total=""
        if [  -d "$g/rebase-merge" ]; then
            _git_eread "$g/rebase-merge/head-name" branch
            _git_eread "$g/rebase-merge/msgnum" step;
            _git_eread "$g/rebase-merge/end" total;
            if [ -f "$g/rebase-merge/interactive" ]; then
                status="|REBASE-i"
            else
                status="|REBASE-m"
            fi
        elif [ -d "$g/rebase-apply" ]; then
            _git_eread "$g/rebase-apply/next" step;
            _git_eread "$g/rebase-apply/last" total;
            if [ -f "$g/rebase-apply/rebasing" ]; then
                _git_eread "$g/rebase-merge/head-name" branch
                status="|REBASE"
            else
                if [ -f "$g/rebase-apply/applying" ]; then
                    status="|AM"
                else
                    status="|AM/REBASE"
                fi
            fi
        elif [ -f "$g/MERGE_HEAD" ]; then
            status="|MERGING"
        elif [ -f "$g/CHERRY_PICK_HEAD" ]; then
            status="|CHERRY-PICKING"
        elif [ -f "$g/REVERT_HEAD" ]; then
            status="|REVERTING"
        elif [ -f "$g/BISECT_LOG" ]; then
            status="|BISECTING"
        fi

        if [ -z "$branch" ]; then
            if [ -h "$g/HEAD" ]; then
                branch="$(git symbolic-ref HEAD 2>/dev/null)"
            else
                local head=""
                if [ -r "$g/HEAD" ]; then
                    _git_eread "$g/HEAD" head
                fi
                branch="${head#ref: }"
                if [ "$head" = "$branch" ]; then
                    branch=$(git describe --tags --exact-match HEAD 2>/dev/null)
                    if [ -z "$branch" ]; then
                        branch="$(git rev-parse --short HEAD)..."
                    fi
                fi
            fi
        fi
        branch=${branch##refs/heads/}

        local extra=""
        if [ -n "$step" ]; then
            extra=" ${step}"
        fi
        if [ -n "$total" ]; then
            extra="$extra/${total}"
        fi

        print "(${branch}${status}${extra})"
        return 0
    fi
    return 1
}

_get_prompt_color() {
    local TXTBLK='\e[0;30m' # Black - Regular
    local TXTRED='\e[0;31m' # Red
    local TXTGRN='\e[0;32m' # Green
    local TXTYLW='\e[0;33m' # Yellow
    local TXTBLU='\e[0;34m' # Blue
    local TXTPUR='\e[0;35m' # Purple
    local TXTCYN='\e[0;36m' # Cyan
    local TXTWHT='\e[0;37m' # White
    local BLDBLK='\e[1;30m' # Black - Bold
    local BLDRED='\e[1;31m' # Red
    local BLDGRN='\e[1;32m' # Green
    local BLDYLW='\e[1;33m' # Yellow
    local BLDBLU='\e[1;34m' # Blue
    local BLDPUR='\e[1;35m' # Purple
    local BLDCYN='\e[1;36m' # Cyan
    local BLDWHT='\e[1;37m' # White
    local UNDBLK='\e[4;30m' # Black - Underline
    local UNDRED='\e[4;31m' # Red
    local UNDGRN='\e[4;32m' # Green
    local UNDYLW='\e[4;33m' # Yellow
    local UNDBLU='\e[4;34m' # Blue
    local UNDPUR='\e[4;35m' # Purple
    local UNDCYN='\e[4;36m' # Cyan
    local UNDWHT='\e[4;37m' # White
    local BAKBLK='\e[40m'   # Black - Background
    local BAKRED='\e[41m'   # Red - Background
    local BAKGRN='\e[42m'   # Green - Background
    local BAKYLW='\e[43m'   # Yellow - Background
    local BAKBLU='\e[44m'   # Blue - Background
    local BAKPUR='\e[45m'   # Purple - Background
    local BAKCYN='\e[46m'   # Cyan - Background
    local BAKWHT='\e[47m'   # White - Background
    local TXTRST='\e[0m'    # Text Reset
    
}

_color() {
    print -n "\e[$1;${2}m"
    shift 2
    print "$@\e[00m"
}


##
## prompt
##
if [ -z "$SSH_TTY" ]; then
    __color=37
else
    __color=33
fi
PS1="\$(_color 00 $__color '${USER:=$(id -un)}'"@${HOSTNAME:=$(hostname -s)}"):\$(_prompt_path)\$(_git_ps1)"
unset __color

if (( USER_ID )); then
    PS1="$PS1 $ "
else
    PS1="$PS1 # "
fi


##
## aliases
##
alias ll='ls -lh'
alias ..='cd ..'


##
## env vars
##
export LSCOLORS="gxfxcxdxbxegedabagacad"
export CLICOLOR=1
