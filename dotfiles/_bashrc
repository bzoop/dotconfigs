# vim: set ft=sh:

# If not running interactively, don't do anything else
[ -z "$PS1" ] && return

# detect os
if [ "$TERM_PROGRAM" = "Apple_Terminal" ]; then
    OS="Darwin"
else
    OS=$(uname -s)
fi
export OS

## some terminal settings
# If this is an xterm set the title to user@host:dir
# if 'dumb', just bail without doing anything further
case $TERM in
    xterm*)
        #PROMPT_COMMAND='echo -ne "\033]0;@${HOSTNAME%%.*}\007"'
        PROMPT_COMMAND='echo -ne "\033]0;@\007"'
        ;;
    dumb)
        # dont save history if 'dumb'
        unset HISTFILE
        return
        ;;
    *) ;;
esac

IS_SSH="${IS_SSH:-no}"
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    IS_SSH="yes"
fi

export IS_SSH

## load local env vars if they exist
[ -s $HOME/.bashrc_pre ] && . $HOME/.bashrc_pre


#######################
#### function defs
#######################

#### exported functions
# function to show git branch
# later on bash-completion will pull in git-completion, if it is installed
# which will override this function. So just provide this as a fallback in
# case __git_ps1 doesn't exist later....
__git_ps1() {
    ref=$(git symbolic-ref -q HEAD 2> /dev/null) || return
    printf "${1:- (%s)}" "${ref#refs/heads/}"
}

dotfiles_update() {
    $HOME/.myconfigs/scripts/update.sh
}

#### non-exported functions
## these functions should be removed
## when they are used (some remove themselves)

# set prompt
prompt_on() {
    ## set some color variables to make things a bit easier to read later
    local TXTBLK='\e[0;30m' # Black - Regular
    local TXTRED='\e[0;31m' # Red
    local TXTGRN='\e[0;32m' # Green
    local TXTYLW='\e[0;33m' # Yellow
    local TXTBLU='\e[0;34m' # Blue
    local TXTPUR='\e[0;35m' # Purple
    local TXTCYN='\e[0;36m' # Cyan
    local TXTWHT='\e[0;37m' # White
    local BLDBLK='\e[1;30m' # Black - Bold
    local BLDRED='\e[1;31m' # Red
    local BLDGRN='\e[1;32m' # Green
    local BLDYLW='\e[1;33m' # Yellow
    local BLDBLU='\e[1;34m' # Blue
    local BLDPUR='\e[1;35m' # Purple
    local BLDCYN='\e[1;36m' # Cyan
    local BLDWHT='\e[1;37m' # White
    local UNDBLK='\e[4;30m' # Black - Underline
    local UNDRED='\e[4;31m' # Red
    local UNDGRN='\e[4;32m' # Green
    local UNDYLW='\e[4;33m' # Yellow
    local UNDBLU='\e[4;34m' # Blue
    local UNDPUR='\e[4;35m' # Purple
    local UNDCYN='\e[4;36m' # Cyan
    local UNDWHT='\e[4;37m' # White
    local BAKBLK='\e[40m' # Black - Background
    local BAKRED='\e[41m' # Red - Background
    local BAKGRN='\e[42m' # Green - Background
    local BAKYLW='\e[43m' # Yellow - Background
    local BAKBLU='\e[44m' # Blue - Background
    local BAKPUR='\e[45m' # Purple - Background
    local BAKCYN='\e[46m' # Cyan - Background
    local BAKWHT='\e[47m' # White - Background
    local TXTRST='\e[0m' # Text Reset

    # only set hostname in prompt if /not/ local
    local HNAME=''
    if [ "$IS_SSH" = "yes" ]; then
        HNAME='\h'
        if [ -n "${TWO_DOT_HOSTNAME}" ]; then
            HNAME="${HOSTNAME%.*.*}"
            unset -v TWO_DOT_HOSTNAME
        fi
        if [ -n "${HNAME_OVERRIDE}" ]; then
            HNAME="${HNAME_OVERRIDE}"
            unset -v HNAME_OVERRIDE
        fi
    fi
    # set ps1 to show git branch, using previously defined
    # function. Also show different host color if over ssh.
    # visual cues = winrar
    # ( idea lifted from phrakture. pew pew! )
    local UH_COLOR="${TXTRST}"
    if [ "$IS_SSH" = "no" ]; then
        UH_COLOR="${TXTWHT}"
    else
        UH_COLOR="${TXTYLW}"
    fi
    PS1="\[${UH_COLOR}\]\u@${HNAME}\[${TXTRST}\]:\W\$(__git_ps1 '(%s)')\\$ "
}

prompt_off() {
    PS1="\\$ "
}

## call it and unset
#__mcfg_set_bash_prompt && unset -f __mcfg_set_bash_prompt
prompt_on


############################
#### environment settings
############################

### Load os specific settings
[ -s "$HOME/.bashrc.d/$OS.sh" ] && . "$HOME/.bashrc.d/$OS.sh"

# disable START/STOP output control
if [ -x /bin/stty ]; then
    /bin/stty -ixon
    /bin/stty -ixoff
fi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# send hup on exit
shopt -s huponexit

# do not attempt to search the PATH for possible completions when
# completion is attempted on an empty line.
shopt -s no_empty_cmd_completion

# minor errors in the spelling of a directory component in a cd command will be
# corrected
shopt -s cdspell

# Correct spelling errors during tab-completion
shopt -s dirspell

# preserve multiline command newlines where possible
shopt -s lithist

# This allows you to bookmark your favorite places across the file system
# Define a variable containing a path and you will be able to cd into it
# regardless of the directory you're in
#shopt -s cdable_vars

## change readline history behavior
bind 'set revert-all-at-newline on'

# Perform file completion in a case insensitive fashion
bind "set completion-ignore-case on"

# Treat hyphens and underscores as equivalent
#bind "set completion-map-case on"

# Display matches for ambiguous patterns at first tab press
#bind "set show-all-if-ambiguous on"

## set terminal tab width, if available
#type -p tabs &>/dev/null && tabs -4 &>/dev/null

# erase dups before adding line, and ignore lines starting with spaces
# See bash(1) for more options
export HISTCONTROL="ignoreboth"
# suppress duplicate commands, the simple invocation of 'ls' without any
# arguments, and the shell built-ins bg, fg, cd, pushd, popd, and exit
# also ignores any command starting with a space
export HISTIGNORE="&:l[lsa]:[bf]g:cd*:pushd*:popd*:exit:clear:reset"
# disable saving of history -- only make history per/bash process
#unset HISTFILE

# Automatically trim long paths in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=2

# append to the history file, don't overwrite it
shopt -s histappend

# Save multi-line commands as one command
#shopt -s cmdhist

## enable colors in grep ##
export GREP_OPTIONS='--color=auto'

## some classic env vars ##
export EDITOR=vim
export VISUAL=vim
export PAGER=less

## some git specific vars ##
export GIT_EDITOR=vim
# pager is set it .gitconfig core.pager
# setting it here overrides that setting (and subsequent args)
#export GIT_PAGER=less

# vim on os x returns a non-zero exit code when called with the short
# path name. fucks up git & friends. Use full path.
if [ "$OS" = "Darwin" ]; then
    export GIT_EDITOR=/usr/bin/vim
    export EDITOR=/usr/bin/vim
    export VISUAL=/usr/bin/vim
fi

## less specific vars ##
# turn off .lesshst file
export LESSHISTFILE="-"
# color highlighting in less
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'
export LESS="Ri"

# other environment vars
#export MOZ_DISABLE_PANGO=1
#export FIREFOX_DSP=none
#export OOO_FORCE_DESKTOP=gnome
export CLICOLOR=1

# pip/virtualenvstuff
export PIP_LOG_FILE=/dev/null
export PIP_DISABLE_PIP_VERSION_CHECK=1

# nix stuff
export NIX_PAGER=cat


##########################
#### aliases
##########################

### general

## special case for getting color on linux.
## why can't it use an env var like bsd ls?? *sigh*
alias l.='ls -d .*'
alias ll='ls -lh'

alias myip="curl icanhazip.com"

## load any local overrides at the end
[ -s $HOME/.bashrc_post ] && . $HOME/.bashrc_post
